//random map choose
int randomMap = floor(random(0, 5));
//int randomMap=4;
//to initialize what address of int [][] map to use
public int [][] mapChosen = new int[21][21];

//nyan map array value 0
public int [][] nyanMapColorValue={
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0},
  {0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 1, 0},
  {0, 0, 0, 1, 2, 2, 3, 5, 3, 3, 1, 4, 4, 1, 3, 3, 3, 3, 2, 2, 0},
  {0, 0, 0, 1, 2, 3, 3, 3, 3, 3, 1, 4, 4, 4, 1, 3, 5, 3, 3, 1, 0},
  {0, 0, 0, 1, 2, 3, 3, 3, 5, 3, 1, 4, 4, 4, 4, 1, 1, 1, 1, 4, 0},
  {0, 1, 0, 1, 2, 3, 3, 3, 3, 3, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0},
  {0, 4, 1, 1, 2, 3, 3, 3, 3, 1, 4, 4, 10, 1, 4, 4, 4, 4, 4, 10, 0},
  { 0, 4, 4, 1, 2, 3, 5, 3, 5, 1, 4, 4, 1, 1, 4, 4, 4, 1, 4, 1, 0},
  { 0, 1, 4, 1, 2, 3, 3, 3, 3, 1, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 0},
  { 0, 0, 1, 1, 2, 2, 3, 5, 3, 1, 3, 3, 4, 1, 4, 4, 1, 4, 4, 1, 0},
  { 0, 0, 0, 1, 2, 2, 2, 3, 3, 3, 1, 4, 4, 1, 1, 1, 1, 1, 1, 1, 0},
  { 0, 0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 4, 4, 4, 4, 4, 4, 4, 4, 0},
  { 0, 1, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
  { 0, 1, 4, 4, 1, 0, 1, 4, 4, 1, 0, 0, 1, 4, 4, 1, 0, 1, 4, 4, 0},
  { 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0},
  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
};
//abyss map value 1
int[][] abyssMapColorValue=
  {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 0, 0},
  {0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0},
  {0, 0, 3, 0, 0, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 0, 0, 3, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 5, 5, 1, 1, 1, 1, 1, 5, 5, 0, 0, 0, 0, 0, 0},
  {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0},
  {0, 0, 1, 0, 0, 0, 0, 5, 5, 1, 1, 1, 5, 5, 0, 0, 0, 0, 1, 0, 0},
  {0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0},
  {0, 0, 0, 0, 0, 1, 0, 0, 5, 5, 1, 5, 5, 0, 0, 1, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 0, 0, 0},
  {0, 5, 0, 1, 0, 0, 0, 0, 0, 1, 5, 1, 0, 0, 0, 0, 0, 5, 0, 1, 0},
  {0, 5, 0, 1, 0, 1, 0, 0, 0, 5, 5, 5, 0, 0, 0, 5, 0, 5, 0, 1, 0},
  {0, 5, 0, 1, 0, 1, 0, 0, 0, 1, 5, 1, 0, 0, 0, 5, 0, 5, 0, 1, 0},
  {0, 5, 0, 1, 0, 0, 0, 0, 0, 1, 5, 1, 0, 0, 0, 0, 0, 5, 0, 1, 0},
  {0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
};
//beach map value 2
int [][]beachMapColorValue=
  {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 6, 0, 0, 0, 0},
  {0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 6, 0, 0},
  {0, 0, 7, 7, 7, 0, 0, 0, 0, 0, 2, 3, 2, 0, 0, 0, 6, 0, 6, 0, 0},
  {0, 7, 3, 4, 3, 7, 0, 0, 5, 0, 2, 3, 2, 0, 0, 6, 0, 0, 6, 0, 0},
  {0, 0, 0, 4, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 6, 0, 0},
  {0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0},
  {0, 0, 0, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0},
  {0, 0, 0, 4, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 0, 0, 6, 0, 6, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 0, 0, 0, 6, 0, 0, 6, 0, 6, 0},
  {0, 0, 0, 0, 0, 0, 0, 7, 3, 4, 3, 7, 0, 0, 6, 0, 0, 0, 0, 6, 0},
  {0, 0, 0, 0, 0, 0, 7, 0, 0, 4, 0, 0, 7, 0, 6, 6, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0},
  {0, 0, 1, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 6, 0, 0, 6, 0, 0},
  {0, 0, 1, 1, 1, 1, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 6, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 6, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
};
//labyrinth map Value 3
int[][] labyMapColorValue=
  {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0},
  {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0},
  {0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0},
  {0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0},
  {0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0},
  {0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0},
  {0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0},
  {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0},
  {0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0},
  {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0},
  {0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0},
  {0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0},
  {0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0},
  {0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0},
  {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0},
  {0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6}};
//loss color value 4
int[][] lossMapColorValue=
  {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 5, 0, 0, 3, 0, 0, 0},
  {0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 5, 0, 0, 3, 0, 0, 0},
  {0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 5, 0, 0, 3, 0, 0, 0},
  {0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 5, 0, 0, 3, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 1, 1, 1, 1, 1, 1, 6, 6, 6, 4, 6, 6, 6, 1, 1, 1, 1, 1, 1, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 5, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 5, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 5, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 5, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 5, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 5, 0, 3, 3, 3, 3, 0},
  {0, 0, 0, 5, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};

//inventory box arrays
int invSlots=10;
playerInventory[] player1TempInv= new playerInventory[3]; //temp slots
playerInventory[] player2TempInv =new playerInventory[3]; //temp slots
playerInventory[] player1Inv= new playerInventory[invSlots]; //perm slots
playerInventory[] player2Inv= new playerInventory[invSlots]; //perm slots
color slotBlue= color(131, 210, 252);//color of invslot
color hp1boxc= color(245, 61, 116);
color hp2boxc= color (47, 136, 245);
color xpboxc= color(67, 250, 180);

//player health and xp box arrays
int hpxpBox=5;//each square will represent 1/hpxpBox of HP or XP
playerInventory player1HP;//declaring class instances
playerInventory player2HP;
playerInventory player1XP;
playerInventory player2XP;

//players
Tank player1 = new Tank(60, 60, 0, 0, color(255, 0, 0),false);
Tank player2 = new Tank(60, 140, 0, 0, color(0, 0, 255),false);

//test enemy loot disappear
Tank enemy1= new Tank(300,300,0,0, 255, true);
Tank enemy2= new Tank(200,300,0,0, 255, true);

public ArrayList<Shot> shots = new ArrayList<Shot>();
boolean keyW, keyA, keyS, keyD, keyQ, keyE, keyUp, keyLeft, keyDown, keyRight, keyComma, keyPeriod;
boolean p1Fire, p2Fire=false;
float mouseTheta;
public Terrain[][] layout = level1();

//amount of enemies defeated
int enemyKilled=0;
//images
PImage beach, nyan, loss, abyss, laby, wall;
PImage killCount;
PImage bulldoze, bulletamt, bulletbounce, bulletcast, bulletdmg, bulletspeed, CritBullets, Dmg2Heal, Drop_Chance, missile;
PImage Explosive_bullet, Heal, healthboost, Iframe, instant_death, tankspeed, MachineGun, Rocket, XPboost, explosion;
PFont stencil;
//perks and other image arrays
ArrayList<PImage> permPerks = new ArrayList<>();
ArrayList<PImage> tempPerks = new ArrayList<>();
ArrayList<PImage> otherAssets = new ArrayList<>(); //for images of explosions and rockets, etc
ArrayList<Boolean> pickUP= new ArrayList<>(); //if a loot was picked up
ArrayList<Timer> timer = new ArrayList<>();
